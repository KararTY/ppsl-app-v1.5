/* src/Popular.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	space,
	text
} from "../_snowpack/pkg/svelte/internal.js";

import { randomTitle, randomNumber, randomYear } from "./Mockups/Random.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (18:2) {#each articles as article}
function create_each_block(ctx) {
	let a;
	let article;
	let strong0;
	let t0_value = /*article*/ ctx[1].title + "";
	let t0;
	let t1;
	let small0;
	let span0;
	let t3;
	let strong1;
	let t4_value = /*article*/ ctx[1].number + "";
	let t4;
	let t5;
	let small1;
	let span1;
	let t7;
	let strong2;
	let t8_value = /*article*/ ctx[1].year + "";
	let t8;
	let t9;

	return {
		c() {
			a = element("a");
			article = element("article");
			strong0 = element("strong");
			t0 = text(t0_value);
			t1 = space();
			small0 = element("small");
			span0 = element("span");
			span0.textContent = "Number:";
			t3 = space();
			strong1 = element("strong");
			t4 = text(t4_value);
			t5 = space();
			small1 = element("small");
			span1 = element("span");
			span1.textContent = "Year:";
			t7 = space();
			strong2 = element("strong");
			t8 = text(t8_value);
			t9 = space();
			attr(strong0, "class", "mb-2");
			attr(small0, "class", "text-gray-500");
			attr(small1, "class", "text-gray-500");
			attr(article, "class", "flex flex-col gap-y-2");
			attr(a, "href", "#");
			attr(a, "class", "bg-white rounded-sm shadow-lg p-4");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, article);
			append(article, strong0);
			append(strong0, t0);
			append(article, t1);
			append(article, small0);
			append(small0, span0);
			append(small0, t3);
			append(small0, strong1);
			append(strong1, t4);
			append(article, t5);
			append(article, small1);
			append(small1, span1);
			append(small1, t7);
			append(small1, strong2);
			append(strong2, t8);
			append(a, t9);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(a);
		}
	};
}

function create_fragment(ctx) {
	let h1;
	let t1;
	let div;
	let each_value = /*articles*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			h1 = element("h1");
			h1.textContent = "Popular pages";
			t1 = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(h1, "class", "text-center font-bold mb-4");
			attr(div, "class", "grid grid-cols sm:grid-cols-2 md:grid-cols-3 gap-6 -mx-4");
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			insert(target, t1, anchor);
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*articles*/ 1) {
				each_value = /*articles*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self) {
	let articles = [];

	for (let index = 0; index < 9; index++) {
		let rYear = randomYear();

		articles.push({
			title: randomTitle(rYear),
			number: randomNumber(),
			year: rYear
		});
	}

	return [articles];
}

class Popular extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Popular;