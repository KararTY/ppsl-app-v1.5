import './Navbar.svelte.css.proxy.js';
/* src/Navbar.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	space,
	toggle_class,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import X from "./Icons/X.svelte.js";
import Menu from "./Icons/Menu.svelte.js";
import Search from "./Icons/Search.svelte.js";
import Login from "./Icons/Login.svelte.js";
import Settings from "./Icons/Settings.svelte.js";

function create_else_block(ctx) {
	let x;
	let current;
	x = new X({});

	return {
		c() {
			create_component(x.$$.fragment);
		},
		m(target, anchor) {
			mount_component(x, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(x.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(x.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(x, detaching);
		}
	};
}

// (37:10) {#if menuIsOpen}
function create_if_block(ctx) {
	let menu;
	let current;
	menu = new Menu({});

	return {
		c() {
			create_component(menu.$$.fragment);
		},
		m(target, anchor) {
			mount_component(menu, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(menu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(menu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(menu, detaching);
		}
	};
}

function create_fragment(ctx) {
	let nav;
	let div6;
	let div2;
	let div0;
	let t1;
	let div1;
	let button;
	let current_block_type_index;
	let if_block;
	let t2;
	let div4;
	let div3;
	let search_1;
	let t3;
	let input;
	let t4;
	let div5;
	let a0;
	let login;
	let t5;
	let span1;
	let t7;
	let a1;
	let settings;
	let t8;
	let span2;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*menuIsOpen*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	search_1 = new Search({
			props: { class: "md:text-sm", id: "search_svg" }
		});

	login = new Login({});
	settings = new Settings({});

	return {
		c() {
			nav = element("nav");
			div6 = element("div");
			div2 = element("div");
			div0 = element("div");
			div0.innerHTML = `<p class="m-4 flex items-center"><span class="font-bold">Repair Wiki - PPSL</span></p>`;
			t1 = space();
			div1 = element("div");
			button = element("button");
			if_block.c();
			t2 = space();
			div4 = element("div");
			div3 = element("div");
			create_component(search_1.$$.fragment);
			t3 = space();
			input = element("input");
			t4 = space();
			div5 = element("div");
			a0 = element("a");
			create_component(login.$$.fragment);
			t5 = space();
			span1 = element("span");
			span1.textContent = "Login";
			t7 = space();
			a1 = element("a");
			create_component(settings.$$.fragment);
			t8 = space();
			span2 = element("span");
			span2.textContent = "Settings";
			attr(div0, "class", "-m-4");
			attr(button, "type", "button");
			attr(button, "class", "hamburger svelte-1xle9fr");
			attr(div1, "class", "md:hidden flex items-center justify-center");
			attr(div2, "class", "flex items-center justify-between px-4 py-3 md:p-0");
			attr(div3, "class", "absolute inset-y-0 right-0 p-2 flex items-center pointer-events-none");
			attr(input, "type", "text");
			attr(input, "name", "search_wiki");
			attr(input, "id", "search");
			attr(input, "placeholder", "Type in your search...");
			attr(input, "class", "svelte-1xle9fr");
			attr(div4, "class", "relative flex-grow 2xl:mx-48 md:mx-20 md:rounded-md shadow-sm");
			attr(span1, "class", "svelte-1xle9fr");
			attr(a0, "href", "#");
			attr(a0, "class", "navbar-burger-button svelte-1xle9fr");
			attr(span2, "class", "svelte-1xle9fr");
			attr(a1, "href", "#");
			attr(a1, "class", "navbar-burger-button svelte-1xle9fr");
			attr(div5, "class", "left-menu hidden svelte-1xle9fr");
			toggle_class(div5, "hidden", !/*menuIsOpen*/ ctx[0]);
			attr(div6, "class", "md:container md:mx-auto md:flex md:justify-between md:items-center");
			attr(nav, "class", "bg-white md:px-4 md:py-2 shadow");
		},
		m(target, anchor) {
			insert(target, nav, anchor);
			append(nav, div6);
			append(div6, div2);
			append(div2, div0);
			append(div2, t1);
			append(div2, div1);
			append(div1, button);
			if_blocks[current_block_type_index].m(button, null);
			append(div6, t2);
			append(div6, div4);
			append(div4, div3);
			mount_component(search_1, div3, null);
			append(div4, t3);
			append(div4, input);
			append(div6, t4);
			append(div6, div5);
			append(div5, a0);
			mount_component(login, a0, null);
			append(a0, t5);
			append(a0, span1);
			append(div5, t7);
			append(div5, a1);
			mount_component(settings, a1, null);
			append(a1, t8);
			append(a1, span2);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[1]),
					listen(input, "keypress", onKeyPress),
					listen(input, "focus", onFocus),
					listen(input, "focusout", onFocusOut)
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index !== previous_block_index) {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					
				}

				transition_in(if_block, 1);
				if_block.m(button, null);
			}

			if (dirty & /*menuIsOpen*/ 1) {
				toggle_class(div5, "hidden", !/*menuIsOpen*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(search_1.$$.fragment, local);
			transition_in(login.$$.fragment, local);
			transition_in(settings.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(search_1.$$.fragment, local);
			transition_out(login.$$.fragment, local);
			transition_out(settings.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(nav);
			if_blocks[current_block_type_index].d();
			destroy_component(search_1);
			destroy_component(login);
			destroy_component(settings);
			mounted = false;
			run_all(dispose);
		}
	};
}

function search(terms) {
	console.log(terms);
}

function onKeyPress(e = new KeyboardEvent()) {
	if (e.key === "Enter") search(this.value);
}

function onFocus() {
	document.getElementById("search_svg").classList.add("text-brand");
}

function onFocusOut() {
	document.getElementById("search_svg").classList.remove("text-brand");
}

function instance($$self, $$props, $$invalidate) {
	let menuIsOpen = false;
	const click_handler = () => $$invalidate(0, menuIsOpen = !menuIsOpen);
	return [menuIsOpen, click_handler];
}

class Navbar extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Navbar;