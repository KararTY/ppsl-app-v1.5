/* src/Aside.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "../_snowpack/pkg/svelte/internal.js";

import { randomTitle, randomDateTime } from "./Mockups/Random.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	child_ctx[4] = i;
	return child_ctx;
}

// (31:8) {#if index < (articles.length - 1)}
function create_if_block(ctx) {
	let hr;

	return {
		c() {
			hr = element("hr");
		},
		m(target, anchor) {
			insert(target, hr, anchor);
		},
		d(detaching) {
			if (detaching) detach(hr);
		}
	};
}

// (24:6) {#each articles as article, index}
function create_each_block(ctx) {
	let a;
	let article;
	let strong;
	let t0_value = /*article*/ ctx[2].title + "";
	let t0;
	let t1;
	let small;
	let t2_value = /*article*/ ctx[2].lastUpdated.toRelative() + "";
	let t2;
	let t3;
	let if_block_anchor;
	let if_block = /*index*/ ctx[4] < /*articles*/ ctx[1].length - 1 && create_if_block(ctx);

	return {
		c() {
			a = element("a");
			article = element("article");
			strong = element("strong");
			t0 = text(t0_value);
			t1 = space();
			small = element("small");
			t2 = text(t2_value);
			t3 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr(small, "class", "text-gray-500");
			attr(article, "class", "flex flex-col gap-2");
			attr(a, "href", "#");
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, article);
			append(article, strong);
			append(strong, t0);
			append(article, t1);
			append(article, small);
			append(small, t2);
			insert(target, t3, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(a);
			if (detaching) detach(t3);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment(ctx) {
	let aside;
	let h1;
	let t0;
	let t1;
	let div1;
	let div0;
	let each_value = /*articles*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			aside = element("aside");
			h1 = element("h1");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			div1 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(h1, "class", "text-center font-bold mb-4");
			attr(div0, "class", "flex flex-col gap-2");
			attr(div1, "class", "bg-white -mx-4 p-4 rounded-sm shadow-lg");
			attr(aside, "class", "lg:w-1/5 m-4 p-4 lg:ml-16 mb-0 lg:mb-4");
		},
		m(target, anchor) {
			insert(target, aside, anchor);
			append(aside, h1);
			append(h1, t0);
			append(aside, t1);
			append(aside, div1);
			append(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*title*/ 1) set_data(t0, /*title*/ ctx[0]);

			if (dirty & /*articles*/ 2) {
				each_value = /*articles*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(aside);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { title } = $$props;
	let articles = [];

	for (let index = 0; index < 6; index++) {
		articles.push({
			title: randomTitle(),
			lastUpdated: randomDateTime()
		});
	}

	articles.sort((a, b) => {
		return b.lastUpdated.toMillis() - a.lastUpdated.toMillis();
	});

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
	};

	return [title, articles];
}

class Aside extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { title: 0 });
	}
}

export default Aside;