<!-- The HTML layout of the element -->
<div is="ppsl-leftmenu">
  <div class="menu is-dark">
    <div class="menu-label has-text-light">
      <div class="level is-mobile">
        {{ this.menuLabelHTML }}
      </div>
    </div>
    <ul class="menu-list">
      {{ this.contentHTML }}
    </ul>
  </div>
</div>

<!-- The logic of the element -->
<script type="module">
  import { html, render } from '@uce'

  export default {
    props: {
      contentHTML: null,
      menuLabelHTML: null
    },

    async loadProduct (ev) {
      const productSHA = ev.currentTarget.dataset.sha
      const productId = ev.currentTarget.dataset.id

      const res = await self.loadFromGithub('products', productId, productSHA)

      // Rehydrate ppsl-product
      const productDiv = document.getElementById('product')
      productDiv.setProduct(productId)
    },

    createProduct () {
      // TODO: Use existing stuff, this is temporary.
      document.getElementById('modal').openCreateModal()
    },

    toggleProductsMenuList (ev) {
      ev.stopPropagation()
      const menuList = this.querySelector('.menu-list')
      menuList.classList.toggle('is-hidden')

      const iconElement = ev.currentTarget.querySelector('[is="ppsl-icon"')
      iconElement.icon = menuList.classList.contains('is-hidden') ? 'chevron-up' : 'chevron-down'
      iconElement.showIcon()
    },

    async products () {
      let { offline, editedData } = self.GlobalContext

      this.menuLabelHTML = html`Loading PPSL App...`

      this.contentHTML = html`<p>Logging into Github...</p>`

      try {
        await self.loginToOctoKit(self.getPersonalAccessToken())
      } catch (error) {
        offline = error
        document.getElementById('product').contentHTML = html`
          <p>Something went wrong while attempting to login to Github. Enabling offline mode.</p>
        `
      }

      this.contentHTML = document.getElementById('root').loaderTemplate(4)

      let products = []
      try {
        // Online
        products = await self.getBranchDirectoryContent('products')

        for (let index = 0; index < editedData.products.length; index++) {
          const editedProduct = editedData.products[index]
          
          // Add all new ones.
          if (editedProduct.new) products.push(editedProduct)
        }
      } catch (error) {
        products = editedData.products
        // Offline
      }

      this.contentHTML = html`${
        products.sort((a, b) => { return (b.new || 0) - (a.new || 0) }).map((product, index) => {
          const label = product.label || product._id

          return html`
            <li>
              <a onclick=${this.loadProduct} data-sha="${product.sha}" data-id="${label}">
                <p title="${label}">
                  ${product.new ? html`
                    <small class="level-item tag is-success">New</small>
                  ` : undefined}
                  <span>${label}</span>
                </p>
              </a>
            </li>
          `
        })}
      `

      this.menuLabelHTML = html`
        <div class="level-left">
          <a class="level-item" onclick=${this.toggleProductsMenuList.bind(this)} title="Hide products">
            <span is="ppsl-icon" icon="chevron-down"></span>
            <span>Products</span>
          </a>
        </div>
        <div class="level-right">
          <a class="level-item button is-small is-dark" onclick=${this.createProduct}>
            <span is="ppsl-icon" icon="plus-square"></span>
          </a>
        </div>
      `
    },

    setup(element) {
      element.classList.add('column', 'is-2')

      element.connected = element.products
    }
  }
//# sourceURL=ppsl-leftmenu.js
</script>