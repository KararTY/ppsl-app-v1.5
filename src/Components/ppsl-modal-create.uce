<!-- The HTML layout of the element -->
<div is="ppsl-modal-create">
  <div class="modal-card-head">
    <p class="modal-card-title">Creating "{{ this.id }}"</p>
  </div>
  <div class="modal-card-body">
    <p class="control">
      <label class="label">New field name</label>
      <input class="input" onInput="{{ this.onInput.bind(this) }}" placeholder="First character lowercase, no spaces" name="newFieldName">
    </p>
    <div class="field has-addons">
      <p class="control is-expanded">
        <button class="button is-fullwidth" onclick="{{ () => this.addField('input') }}" id="createinput">Add as input field</button>
      </p>
      <p class="control is-expanded">
        <button class="button is-fullwidth" onclick="{{ () => this.addField('textarea') }}" id="createtextarea">Add as textarea field</button>
      </p>
    </div>
    {{ this.fieldsHTML }}
    <hr>
    <strong>Output for "{{ this.id }}":</strong>
    <pre>{{ this.contentPRE }}</pre>
  </div>
  <div class="modal-card-foot">
    <button class="button is-success" onclick="{{ this.create.bind(this) }}" id="createbutton">Create</button>
    <button class="button is-text" onclick="{{ this.closeModal }}">Close</button>
  </div>
</div>

<!-- The logic of the element -->
<script type="module">
  import { html } from '@uce'

  export default {
    props: {
      contentPRE: null,
      fieldsHTML: null,
      timer: null,
      id: null,
      tempProductNamesList: [],
      fields: [
        { type: 'input', name: 'number'},
        { type: 'input', name: 'year'},
        { type: 'input', name: 'label'},
        { type: 'textarea', name: 'description'}
      ],
      _defaultFields: ['description', 'number', 'year', 'label'],
      productObject: {}
    },

    buttonsToggleDisable (disable) {
      const el = ['createinput', 'createtextarea', 'createbutton']
      for (let index = 0; index < el.length; index++) {
        const id = el[index]

        document.getElementById(id).disabled = disable ? true : !document.getElementById(id).disabled
      }
    },

    async create () {
      this.buttonsToggleDisable(true)

      await this.parse()

      if (this.id.length === 0) return

      const newData = {
        _id: this.id,
        content: { ...this.productObject, problems: [] },
        sha: null,
        new: true
      }

      const { editedData, data } = self.GlobalContext

      editedData['products'].push(newData)

      self.saveDataToStorage('editedData', editedData)
      
      this.closeModal()

      await document.getElementById('leftmenu').products()
    },

    async parse (target) {
      if (target) {
        target.value = target.value.trim()

        if (target.name === 'newFieldName') {
          target.value = String(target.value.substr(0, 1).toLowerCase() + target.value.substr(1)) // First character lowercase
            .replace(/^[0-9]+/, '') // Remove starting numerical character.
            .replace(/[^\w]/g, '') // Replace any non-word characters.
          this.buttonsToggleDisable()
          return
        }
      }

      const { editedData, data } = self.GlobalContext
      const form = this.querySelector('#createproductform')

      const product = {}

      for (let index = 0; index < this.fields.length; index++) {
        const field = this.fields[index]
        const fieldName = field.name

        if (fieldName !== 'label') {
          const formEl = form.elements[fieldName]

          product[fieldName] = formEl.value
        }
      }

      if (form.elements.label.value.length === 0) this.id = `${[product.modelNumber, product.year].filter(s => s && s.length > 0).join(' ')}`
      else this.id = form.elements.label.value

      // Make sure it doesn't already exist
      let count = 0
      const productsIdArr = [...editedData['products'].map(p => p._id), ...this.tempProductNamesList]
      for (let index = 0; index < productsIdArr.length; index++) {
        const id = productsIdArr[index]
        if (this.id.toLowerCase() === id.toLowerCase()) count++
      }

      if (count > 0) {
        this.id += count
        this.getElementsByTagName('input')['label'].value = this.id
      }

      this.productObject = { ...this.productObject, ...product }

      this.buttonsToggleDisable()
    },

    async onInput (ev) {
      let target
      if (ev) {
        ev.preventDefault()
        target = ev.target
      }

      this.buttonsToggleDisable(true)
      clearTimeout(this.timer)

      this.timer = setTimeout(async () => {
        // Parse product object.
        await this.parse(target)

        this.contentPRE = window.jsyaml.dump(this.productObject, { schema: window.jsyaml.JSON_SCHEMA })
      }, 500)
    },

    addField (type) {
      const field = this.getElementsByTagName('input')['newFieldName']
      const fieldName = field.value

      if (fieldName.length === 0) return

      const exists = this.fields.find(f => f.name === fieldName)
      if (exists) return

      this.fields.push({
        type,
        name: fieldName
      })

      this.showFields()
    },

    async removeField (ev) {
      ev.preventDefault()
      const target = ev.currentTarget
      const fieldName = target.dataset.fieldName

      if (this._defaultFields.includes(fieldName)) return

      const index = this.fields.findIndex(f => f.name === fieldName)

      if (index > -1) {
        this.fields.splice(index, 1)
        this.productObject[fieldName] = undefined
        this.onInput()
        this.showFields()
      }
    },

    showFields () {
      this.fieldsHTML = html`
        <form class="form" id="createproductform">
          ${this.fields.map((field, ind) => {
            const label = field.name.substr(0, 1).toUpperCase() + field.name.substr(1)
            const props = { onInput: this.onInput, label, name: field.name }
            // TODO: I know what you're thinking, an anonymous IIFE? Why? (Replace later.)
            return html`
              ${ind !== 0 ? html`<hr>` : undefined}
              ${(() => {
                if (field.type === 'input') {
                  return html`<div is="ppsl-input" .props=${{ ...props }} value="${field.name === 'label' ? this.id : this.productObject[field.name]}"></div>`
                  } else if (field.type === 'textarea') {
                    return html`<div is="ppsl-textarea" .props=${{ ...props }} value="${this.productObject[field.name]}"></div>`
                  }
                })()
              }
              ${!this._defaultFields.includes(field.name) ? html`<a class="button is-small" data-field-name="${field.name}" onclick=${this.removeField.bind(this)}>Delete ${field.name} field.</a>` : undefined}
            `
          })}
        </form>
      `
    },

    async setup (element) {
      element.classList.add('modal-card')
      element.connected = element.showFields
      element.tempProductNamesList = (await self.getBranchDirectoryContent('products')).map(p => p.label)
    }
  }
//# sourceURL=ppsl-modal-create.js
</script>