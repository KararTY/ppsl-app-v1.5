
<div is=ppsl-modal-upload>
<div class=modal-card-head>
<p class=modal-card-title>Upload to Github</p>
</div>
<div class=modal-card-body>
{{ this.contentHTML }}
</div>
<div class=modal-card-foot>
<button class="button is-success" onclick={{this.uploadPR.bind(this)}}>
<span is=ppsl-icon icon=git-pull-request></span>
<span>Upload PR</span>
</button>
<button class="button is-text" onclick={{this.closeModal}}>Close</button>
</div>
</div>
<script type=module>import{html as e}from"@uce"
export default{props:{filesToUpload:null,prData:null,uploadData:null,contentHTML:null},async uploadPR(e){if(e.preventDefault(),0===this.filesToUpload.length)return
const t=this.querySelector(".button.is-success")
if(t.disabled)return
t.disabled=!0,t.firstElementChild.classList.add("loader")
const{githubUser:a,prData:i,editedData:s,settings:l}=self.GlobalContext
await self.createForkIfNotExists()
const o=`${a.login}-${Date.now()}`,d=await self.getOrCreateBranchIfNotExists(o),n=(await self.createCommit(d.commit?branchData.commit.sha:d.object.sha,o,this.filesToUpload),await self.createPullRequest(o,this.filesToUpload))
openExternalURL("_blank",n.html_url)
for(let e=0;e<this.filesToUpload.length;e++){const t=this.filesToUpload[e],a=t.json._id
s[t.json.type].find((e=>e._id===a)).pr=!0}self.saveDataToStorage("editedData",s),i.push({number:n.number,id:n.id,settings:{repo:{owner:l.repo.owner,name:l.repo.name}},files:this.filesToUpload.map((e=>({type:e.json.type,id:e.json._id}))),url:n.html_url,createdAt:n.created_at}),self.saveDataToStorage("prData",i),document.getElementById("modal").openPRListModal()},parseData(){const{editedData:e,data:t}=self.GlobalContext,a=Object.entries(e),i=[],s=[]
for(let e=0;e<a.length;e++){const[l,o]=a[e]
for(let e=0;e<o.length;e++){const a=o[e]
if(!0!==(a.edited||a.new))continue
const d=t[l].find((e=>e._id===a._id))
if(Object.values(a.content).join()===Object.values(d?d.content:{}).join())continue
const n={type:l,...a}
a.pr?s.push({json:n,fileName:`${n.type.substring(0,1).toUpperCase()}${n.type.substring(1)}/${n._id}.yaml`,content:window.jsyaml.dump(n.content,{schema:window.jsyaml.JSON_SCHEMA}),oldContent:d?window.jsyaml.dump(d.content,{schema:window.jsyaml.JSON_SCHEMA}):""}):i.push({json:n,fileName:`${n.type.substring(0,1).toUpperCase()}${n.type.substring(1)}/${n._id}.yaml`,content:window.jsyaml.dump(n.content,{schema:window.jsyaml.JSON_SCHEMA}),oldContent:d?window.jsyaml.dump(d.content,{schema:window.jsyaml.JSON_SCHEMA}):""})}}return this.uploadData=i,this.prData=s,this.filesToUpload=JSON.parse(JSON.stringify(i)),this.showData()},showData(){this.contentHTML=e`
        ${this.showUploadData()}
        ${this.showPRData()}
        ${this.showFilesToUpload()}
      `},hideSection(e,t){e.stopPropagation()
const a=document.getElementById(t)
a.classList.toggle("is-hidden")
const i=e.currentTarget.firstElementChild
i.icon=a.classList.contains("is-hidden")?"chevron-up":"chevron-down",i.showIcon()},deleteChange(e){e.stopPropagation()
const{type:t,id:a,fileName:i}=e.currentTarget.dataset,{data:s,editedData:l}=self.GlobalContext,o=l[t].findIndex((e=>e._id===a))
l[t].splice(o,1)
const d=this.uploadData.findIndex((e=>e.fileName===i))
this.uploadData.splice(d,1)
const n=this.filesToUpload.findIndex((e=>e.fileName===i))
this.filesToUpload.splice(n,1)
const c=getParentType(t)
if(void 0===c)return self.saveDataToStorage("editedData",l),void this.parseData()
for(let e=0;e<s[c.plural].length;e++){const i=s[c.plural][e],o=i.content[t].find((e=>e===a))
if(!o)continue
l[c.plural].find((e=>e._id===o._id))||l[c.plural].push(JSON.parse(JSON.stringify(i)))}for(let e=0;e<l[c.plural].length;e++){const i=l[c.plural][e],s=i.content[t].findIndex((e=>e===a));-1!==s&&(i.content[t].splice(s,1),i.edited=!0)}self.saveDataToStorage("editedData",l),this.parseData()},showPRData(){const t=e=>{e.stopPropagation()
const t=e.currentTarget
if(t.checked){const e=this.prData.find((e=>e.fileName===t.dataset.fileName))
this.filesToUpload.push(e)}else{const e=this.filesToUpload.findIndex((e=>e.fileName===t.dataset.fileName))
this.filesToUpload.splice(e,1)}this.showData()}
return this.prData.length>0?e.for(this.prData)`
        <div class="level is-mobile is-marginless">
          <div class="level-left">
            <h3 class="level-item is-size-3 is-uppercase">Files already in a PR:</h3>
          </div>
          <div class="level-right">
            <a onclick=${e=>this.hideSection(e,"prData")}>
              <span is="ppsl-icon" icon="chevron-down" size="large"></span>
            </a>
          </div>
        </div>
        <hr>
        <div id="prData">
          ${this.prData.map(((a,i)=>e`
            ${0!==i?e`<hr>`:void 0}
            <div class="card">
              <div class="card-header">
                <div class="card-header-title level is-mobile is-marginless is-clipped">
                  <div class="level-left" title="${a.fileName}">
                    <small class="is-size-7 level-item is-hidden-desktop">${a.fileName}</small>
                    <p class="level-item is-hidden-touch">${a.fileName}</p>
                  </div>
                </div>
                <div class="card-header-icon level is-mobile" title="Upload change">
                  <div class="level-item">
                    <input type="checkbox" data-file-name="${a.fileName}" onchange=${t}>
                  </div>
                </div>
              </div>
              <div class="card-content">
                <div is="ppsl-diff" .oldChange="${a.oldContent}" .newChange="${a.content}"></div>
              </div>
            </div>
          `))}
          <hr>
        </div>
      `:void 0},showUploadData(){return e.for(this.uploadData)`
        <div class="level is-mobile is-marginless">
          <div class="level-left">
            <h3 class="level-item is-size-3 is-uppercase">Changed data:</h3>
          </div>
          <div class="level-right">
            <a onclick=${e=>this.hideSection(e,"uploadData")}>
              <span is="ppsl-icon" icon="chevron-down" size="large"></span>
            </a>
          </div>
        </div>
        <hr>
        <div id="uploadData">
          ${this.uploadData.length>0?e`
            ${this.uploadData.map(((t,a)=>e`
              ${0!==a?e`<hr>`:void 0}
              <div class="card">
                <div class="card-header">
                  <div class="card-header-title level is-mobile is-marginless is-clipped">
                    <div class="level-left" title="${t.fileName}">
                      <small class="is-size-7 level-item is-hidden-desktop">${t.fileName}</small>
                      <p class="level-item is-hidden-touch">${t.fileName}</p>
                    </div>
                  </div>
                  <div class="card-header-icon level is-mobile" title="Delete change" data-type="${t.json.type}" data-id="${t.json._id}" data-file-name="${t.fileName}" onclick=${this.deleteChange.bind(this)}>
                    <span is="ppsl-icon" icon="trash" class="level-item"></span>
                  </div>
                </div>
                <div class="card-content">
                  <div is="ppsl-diff" .oldChange="${t.oldContent}" .newChange="${t.content}"></div>
                </div>
              </div>
            `))}
          `:e`<p>Nothing here.</p>`}
          <hr>
        </div>
      `},showFilesToUpload(){return e.for(this.filesToUpload)`
        <h3 class="is-size-3 is-uppercase">Files to upload:</h3>
        <hr>
        <div class="content">
          ${this.filesToUpload.length>0?e`
            <ul>
              ${this.filesToUpload.map(((t,a)=>e`
                <li><h4>${t.fileName}</h4></li>
              `))}
            </ul>
          `:e`<p>There's nothing to upload.</p>`}
        </div>
      `},setup(e){e.classList.add("modal-card"),e.contentHTML=document.getElementById("root").loaderTemplate(3),e.connected=e.parseData}}
</script>